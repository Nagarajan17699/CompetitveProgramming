/*
URL: https://www.hackerrank.com/challenges/new-year-chaos/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=arrays
PERFECT ANSWER: https://www.hackerrank.com/challenges/new-year-chaos/forum/comments/143969

*/

#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the minimumBribes function below.
void moveInt(vector<int> &arr,int i,int j)
{
    int temp = arr[j];
    for(int k=j;k>i;k--)
    {
        arr[k] = arr[k-1];
    }

    arr[i] = temp;
}
void minimumBribes(vector<int> q) {

   
    map<int,int> m;
    vector<int> v;
    int num3=q.size(),sum=0;

    for(int i=1;i<=num3;i++)
    {
        v.push_back(i);
    }

    for(int i=0;i<num3;i++)
    {
            if(q[i]>v[i])
            {
                auto it =  find(v.begin(),v.end(),q[i]);
                int pos = it-v.begin();
                //cout<<pos<<"+"<<i<<" ";
                int temp = pos-i;
                if(temp > 2){
                    //cout<<tmp;
                    cout<<"Too chaotic"<<endl;
                    return;
                }
                sum+=temp;
                moveInt(v,i,pos);

            }
    }

  cout<<sum<<endl;
    return;
 }


//********************  END OF MY CODE  ****************************
// MAIN FUNCTION IS PRE GENERATED BY THE HACKERRANK PLATFORM //

int main()
{
    int t;
    cin >> t;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int t_itr = 0; t_itr < t; t_itr++) {
        int n;
        cin >> n;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        string q_temp_temp;
        getline(cin, q_temp_temp);

        vector<string> q_temp = split_string(q_temp_temp);

        vector<int> q(n);

        for (int i = 0; i < n; i++) {
            int q_item = stoi(q_temp[i]);

            q[i] = q_item;
        }

        minimumBribes(q);
    }

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
